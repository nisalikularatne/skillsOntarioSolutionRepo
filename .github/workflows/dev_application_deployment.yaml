name: Application Deployment - DEV
on:
  workflow_dispatch:
    branches:
      - dev
    paths:
      - application/**
  push:
    branches:
      - dev
    paths:
      - application/**

  pull_request:
    branches:
      - dev
    paths:
      - application/**

  workflow_run:
    workflows: ["Infrastructure Deployment - DEV"]
    types:
      - completed

env:
  PREFIX:  skills-ontario-dev
  ECR_REPOSITORY:  repo
  ECS_SERVICE:   service
  ECS_CLUSTER:   cluster
  ECS_TASK_DEFINITION: task-definition.json

  CONTAINER_NAME:  container
  AWS_REGION: us-east-1
  WORKING_DIR: application/

permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/${PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push $ECR_REGISTRY/${PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "image=$ECR_REGISTRY/${PREFIX}-${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Generate task definition JSON
        id: task-generate
        if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          aws ecs describe-task-definition --task-definition ${PREFIX}-task --region us-east-1 --query taskDefinition > $ECS_TASK_DEFINITION
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || ${{ github.event.workflow_run.conclusion == 'success' }}
        with:
          task-definition: ${{ env.WORKING_DIR }}/${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.PREFIX }}-${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || ${{ github.event.workflow_run.conclusion == 'success' }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.PREFIX }}-${{ env.ECS_SERVICE }}
          cluster: ${{ env.PREFIX }}-${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
